{"ast":null,"code":"import { Router, NavigationEnd } from '@angular/router';\nimport 'rxjs/add/operator/filter';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AccordionDirective {\n  closeOtherLinks(openLink) {\n    this.countState++;\n    if ((openLink.group !== 'sub-toggled' || openLink.group !== 'main-toggled') && this.countState === 1) {\n      if (window.innerWidth < 768 || window.innerWidth >= 768 && window.innerWidth <= 1024) {\n        const toggled_element = document.querySelector('#mobile-collapse');\n        toggled_element.click();\n      }\n    }\n    this.navlinks.forEach(link => {\n      if (link !== openLink && (link.group === 'sub-toggled' || openLink.group !== 'sub-toggled')) {\n        link.open = false;\n      }\n    });\n  }\n  addLink(link) {\n    this.navlinks.push(link);\n  }\n  removeGroup(link) {\n    const index = this.navlinks.indexOf(link);\n    if (index !== -1) {\n      this.navlinks.splice(index, 1);\n    }\n  }\n  getUrl() {\n    return this.router.url;\n  }\n  ngOnInit() {\n    this._router = this.router.events.filter(event => event instanceof NavigationEnd).subscribe(event => {\n      this.countState = 0;\n      this.navlinks.forEach(link => {\n        if (link.group) {\n          const routeUrl = this.getUrl();\n          const currentUrl = routeUrl.split('/');\n          if (currentUrl.indexOf(link.group) > 0) {\n            link.open = true;\n            this.closeOtherLinks(link);\n          }\n        }\n      });\n    });\n  }\n  constructor(router) {\n    this.router = router;\n    this.navlinks = [];\n    this.countState = 1;\n  }\n}\nAccordionDirective.ɵfac = function AccordionDirective_Factory(t) {\n  return new (t || AccordionDirective)(i0.ɵɵdirectiveInject(i1.Router));\n};\nAccordionDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: AccordionDirective,\n  selectors: [[\"\", \"appAccordion\", \"\"]]\n});","map":{"version":3,"mappings":"AACA,SAASA,MAAM,EAAEC,aAAa,QAAQ,iBAAiB;AAGvD,OAAO,0BAA0B;;;AAKjC,OAAM,MAAOC,kBAAkB;EAK7BC,eAAe,CAACC,QAAgC;IAC5C,IAAI,CAACC,UAAU,EAAE;IACjB,IAAI,CAACD,QAAQ,CAACE,KAAK,KAAK,aAAa,IAAIF,QAAQ,CAACE,KAAK,KAAK,cAAc,KAAK,IAAI,CAACD,UAAU,KAAK,CAAC,EAAE;MAClG,IAAIE,MAAM,CAACC,UAAU,GAAG,GAAG,IAAKD,MAAM,CAACC,UAAU,IAAI,GAAG,IAAID,MAAM,CAACC,UAAU,IAAI,IAAK,EAAE;QACpF,MAAMC,eAAe,GAAgBC,QAAQ,CAACC,aAAa,CAAC,kBAAkB,CAAC;QAC/EF,eAAe,CAACG,KAAK,EAAE;;;IAGjC,IAAI,CAACC,QAAQ,CAACC,OAAO,CAAEC,IAA4B,IAAI;MACrD,IAAIA,IAAI,KAAKX,QAAQ,KAAKW,IAAI,CAACT,KAAK,KAAK,aAAa,IAAIF,QAAQ,CAACE,KAAK,KAAK,aAAa,CAAC,EAAE;QAC3FS,IAAI,CAACC,IAAI,GAAG,KAAK;;IAErB,CAAC,CAAC;EACJ;EAEAC,OAAO,CAACF,IAA4B;IAClC,IAAI,CAACF,QAAQ,CAACK,IAAI,CAACH,IAAI,CAAC;EAC1B;EAEAI,WAAW,CAACJ,IAA4B;IACtC,MAAMK,KAAK,GAAG,IAAI,CAACP,QAAQ,CAACQ,OAAO,CAACN,IAAI,CAAC;IACzC,IAAIK,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACP,QAAQ,CAACS,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;;EAElC;EAEAG,MAAM;IACJ,OAAO,IAAI,CAACC,MAAM,CAACC,GAAG;EACxB;EAEAC,QAAQ;IACN,IAAI,CAACC,OAAO,GAAG,IAAI,CAACH,MAAM,CAACI,MAAM,CAACC,MAAM,CAACC,KAAK,IAAIA,KAAK,YAAY7B,aAAa,CAAC,CAAC8B,SAAS,CAAED,KAAoB,IAAI;MACnH,IAAI,CAACzB,UAAU,GAAG,CAAC;MACnB,IAAI,CAACQ,QAAQ,CAACC,OAAO,CAAEC,IAA4B,IAAI;QACrD,IAAIA,IAAI,CAACT,KAAK,EAAE;UACd,MAAM0B,QAAQ,GAAG,IAAI,CAACT,MAAM,EAAE;UAC9B,MAAMU,UAAU,GAAGD,QAAQ,CAACE,KAAK,CAAC,GAAG,CAAC;UACtC,IAAID,UAAU,CAACZ,OAAO,CAAEN,IAAI,CAACT,KAAK,CAAE,GAAG,CAAC,EAAE;YACxCS,IAAI,CAACC,IAAI,GAAG,IAAI;YAChB,IAAI,CAACb,eAAe,CAACY,IAAI,CAAC;;;MAGhC,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAoB,YAAqBX,MAAc;IAAd,WAAM,GAANA,MAAM;IAjDjB,aAAQ,GAAkC,EAAE;IAC9C,eAAU,GAAG,CAAC;EAgDgB;;;mBAnD3BtB,kBAAkB;AAAA;;QAAlBA,kBAAkB;EAAAkC;AAAA","names":["Router","NavigationEnd","AccordionDirective","closeOtherLinks","openLink","countState","group","window","innerWidth","toggled_element","document","querySelector","click","navlinks","forEach","link","open","addLink","push","removeGroup","index","indexOf","splice","getUrl","router","url","ngOnInit","_router","events","filter","event","subscribe","routeUrl","currentUrl","split","constructor","selectors"],"sourceRoot":"","sources":["D:\\Master\\Projet\\MEAN\\m1p10mean-hery-tahiana-front\\src\\app\\shared\\accordion\\accordion.directive.ts"],"sourcesContent":["import { Directive, OnInit } from '@angular/core';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\nimport { AccordionLinkDirective } from './accordionlink.directive';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport 'rxjs/add/operator/filter';\r\n\r\n@Directive({\r\n  selector: '[appAccordion]',\r\n})\r\nexport class AccordionDirective implements OnInit {\r\n\r\n  protected navlinks: Array<AccordionLinkDirective> = [];\r\n  private countState = 1;\r\n  private _router: Subscription;\r\n  closeOtherLinks(openLink: AccordionLinkDirective): void {\r\n      this.countState++;\r\n      if ((openLink.group !== 'sub-toggled' || openLink.group !== 'main-toggled') && this.countState === 1) {\r\n          if (window.innerWidth < 768 || (window.innerWidth >= 768 && window.innerWidth <= 1024)) {\r\n              const toggled_element = <HTMLElement>document.querySelector('#mobile-collapse');\r\n              toggled_element.click();\r\n          }\r\n      }\r\n    this.navlinks.forEach((link: AccordionLinkDirective) => {\r\n      if (link !== openLink && (link.group === 'sub-toggled' || openLink.group !== 'sub-toggled')) {\r\n        link.open = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  addLink(link: AccordionLinkDirective): void {\r\n    this.navlinks.push(link);\r\n  }\r\n\r\n  removeGroup(link: AccordionLinkDirective): void {\r\n    const index = this.navlinks.indexOf(link);\r\n    if (index !== -1) {\r\n      this.navlinks.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  getUrl() {\r\n    return this.router.url;\r\n  }\r\n\r\n  ngOnInit(): any {\r\n    this._router = this.router.events.filter(event => event instanceof NavigationEnd).subscribe((event: NavigationEnd) => {\r\n      this.countState = 0;\r\n      this.navlinks.forEach((link: AccordionLinkDirective) => {\r\n        if (link.group) {\r\n          const routeUrl = this.getUrl();\r\n          const currentUrl = routeUrl.split('/');\r\n          if (currentUrl.indexOf( link.group ) > 0) {\r\n            link.open = true;\r\n            this.closeOtherLinks(link);\r\n          }\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  constructor( private router: Router) {}\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}