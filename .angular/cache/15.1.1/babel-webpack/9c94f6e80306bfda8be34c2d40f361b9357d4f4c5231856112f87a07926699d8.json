{"ast":null,"code":"import { AccordionDirective } from './accordion.directive';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./accordion.directive\";\nexport let AccordionLinkDirective = /*#__PURE__*/(() => {\n  class AccordionLinkDirective {\n    get open() {\n      return this._open;\n    }\n    set open(value) {\n      this._open = value;\n      /*for slimscroll on and off*/\n      document.querySelector('.pcoded-inner-navbar').classList.toggle('scroll-sidebar');\n      if (value) {\n        this.nav.closeOtherLinks(this);\n      }\n    }\n    constructor(nav) {\n      this.nav = nav;\n    }\n    ngOnInit() {\n      this.nav.addLink(this);\n    }\n    ngOnDestroy() {\n      this.nav.removeGroup(this);\n    }\n    toggle() {\n      /*for slimscroll on and off*/\n      document.querySelector('.pcoded-inner-navbar').classList.add('scroll-sidebar');\n      this.open = !this.open;\n    }\n  }\n  AccordionLinkDirective.ɵfac = function AccordionLinkDirective_Factory(t) {\n    return new (t || AccordionLinkDirective)(i0.ɵɵdirectiveInject(AccordionDirective));\n  };\n  AccordionLinkDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: AccordionLinkDirective,\n    selectors: [[\"\", \"appAccordionLink\", \"\"]],\n    hostVars: 2,\n    hostBindings: function AccordionLinkDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"pcoded-trigger\", ctx.open);\n      }\n    },\n    inputs: {\n      group: \"group\",\n      open: \"open\"\n    }\n  });\n  return AccordionLinkDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}