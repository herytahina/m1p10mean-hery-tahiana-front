{"ast":null,"code":"import { AccordionDirective } from './accordion.directive';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./accordion.directive\";\nexport class AccordionLinkDirective {\n  get open() {\n    return this._open;\n  }\n  set open(value) {\n    this._open = value;\n    /*for slimscroll on and off*/\n    document.querySelector('.pcoded-inner-navbar').classList.toggle('scroll-sidebar');\n    if (value) {\n      this.nav.closeOtherLinks(this);\n    }\n  }\n  constructor(nav) {\n    this.nav = nav;\n  }\n  ngOnInit() {\n    this.nav.addLink(this);\n  }\n  ngOnDestroy() {\n    this.nav.removeGroup(this);\n  }\n  toggle() {\n    /*for slimscroll on and off*/\n    document.querySelector('.pcoded-inner-navbar').classList.add('scroll-sidebar');\n    this.open = !this.open;\n  }\n}\nAccordionLinkDirective.ɵfac = function AccordionLinkDirective_Factory(t) {\n  return new (t || AccordionLinkDirective)(i0.ɵɵdirectiveInject(AccordionDirective));\n};\nAccordionLinkDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: AccordionLinkDirective,\n  selectors: [[\"\", \"appAccordionLink\", \"\"]],\n  hostVars: 2,\n  hostBindings: function AccordionLinkDirective_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"pcoded-trigger\", ctx.open);\n    }\n  },\n  inputs: {\n    group: \"group\",\n    open: \"open\"\n  }\n});","map":{"version":3,"mappings":"AAIA,SAASA,kBAAkB,QAAQ,uBAAuB;;;AAK1D,OAAM,MAAOC,sBAAsB;EAIjC,IAEIC,IAAI;IACN,OAAO,IAAI,CAACC,KAAK;EACnB;EAEA,IAAID,IAAI,CAACE,KAAc;IACrB,IAAI,CAACD,KAAK,GAAGC,KAAK;IAClB;IACAC,QAAQ,CAACC,aAAa,CAAC,sBAAsB,CAAC,CAACC,SAAS,CAACC,MAAM,CAAC,gBAAgB,CAAC;IACjF,IAAIJ,KAAK,EAAE;MACP,IAAI,CAACK,GAAG,CAACC,eAAe,CAAC,IAAI,CAAC;;EAEpC;EAKAC,YAAwCF,GAAuB;IAC7D,IAAI,CAACA,GAAG,GAAGA,GAAG;EAChB;EAEAG,QAAQ;IACN,IAAI,CAACH,GAAG,CAACI,OAAO,CAAC,IAAI,CAAC;EACxB;EAEAC,WAAW;IACT,IAAI,CAACL,GAAG,CAACM,WAAW,CAAC,IAAI,CAAC;EAC5B;EAEAP,MAAM;IACJ;IACAH,QAAQ,CAACC,aAAa,CAAC,sBAAsB,CAAC,CAACC,SAAS,CAACS,GAAG,CAAC,gBAAgB,CAAC;IAE9E,IAAI,CAACd,IAAI,GAAG,CAAC,IAAI,CAACA,IAAI;EACxB;;;mBAvCWD,sBAAsB,uBAsBbD,kBAAkB;AAAA;;QAtB3BC,sBAAsB;EAAAgB;EAAAC;EAAAC;IAAA","names":["AccordionDirective","AccordionLinkDirective","open","_open","value","document","querySelector","classList","toggle","nav","closeOtherLinks","constructor","ngOnInit","addLink","ngOnDestroy","removeGroup","add","selectors","hostVars","hostBindings"],"sourceRoot":"","sources":["D:\\Master\\Projet\\MEAN\\m1p10mean-hery-tahiana-front\\src\\app\\shared\\accordion\\accordionlink.directive.ts"],"sourcesContent":["import {\r\n  Directive, HostBinding, Inject, Input, OnInit, OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { AccordionDirective } from './accordion.directive';\r\n\r\n@Directive({\r\n  selector: '[appAccordionLink]'\r\n})\r\nexport class AccordionLinkDirective implements OnInit, OnDestroy {\r\n\r\n  @Input() public group: any;\r\n\r\n  @HostBinding('class.pcoded-trigger')\r\n  @Input()\r\n  get open(): boolean {\r\n    return this._open;\r\n  }\r\n\r\n  set open(value: boolean) {\r\n    this._open = value;\r\n    /*for slimscroll on and off*/\r\n    document.querySelector('.pcoded-inner-navbar').classList.toggle('scroll-sidebar');\r\n    if (value) {\r\n        this.nav.closeOtherLinks(this);\r\n    }\r\n  }\r\n\r\n  protected _open: boolean;\r\n  protected nav: AccordionDirective;\r\n\r\n  constructor(@Inject(AccordionDirective) nav: AccordionDirective) {\r\n    this.nav = nav;\r\n  }\r\n\r\n  ngOnInit(): any {\r\n    this.nav.addLink(this);\r\n  }\r\n\r\n  ngOnDestroy(): any {\r\n    this.nav.removeGroup(this);\r\n  }\r\n\r\n  toggle(): any {\r\n    /*for slimscroll on and off*/\r\n    document.querySelector('.pcoded-inner-navbar').classList.add('scroll-sidebar');\r\n\r\n    this.open = !this.open;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}