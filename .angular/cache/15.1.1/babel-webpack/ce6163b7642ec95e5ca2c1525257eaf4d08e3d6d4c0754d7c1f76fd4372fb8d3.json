{"ast":null,"code":"import { Router, NavigationEnd } from '@angular/router';\nimport 'rxjs/add/operator/filter';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let AccordionDirective = /*#__PURE__*/(() => {\n  class AccordionDirective {\n    closeOtherLinks(openLink) {\n      this.countState++;\n      if ((openLink.group !== 'sub-toggled' || openLink.group !== 'main-toggled') && this.countState === 1) {\n        if (window.innerWidth < 768 || window.innerWidth >= 768 && window.innerWidth <= 1024) {\n          const toggled_element = document.querySelector('#mobile-collapse');\n          toggled_element.click();\n        }\n      }\n      this.navlinks.forEach(link => {\n        if (link !== openLink && (link.group === 'sub-toggled' || openLink.group !== 'sub-toggled')) {\n          link.open = false;\n        }\n      });\n    }\n    addLink(link) {\n      this.navlinks.push(link);\n    }\n    removeGroup(link) {\n      const index = this.navlinks.indexOf(link);\n      if (index !== -1) {\n        this.navlinks.splice(index, 1);\n      }\n    }\n    getUrl() {\n      return this.router.url;\n    }\n    ngOnInit() {\n      this._router = this.router.events.filter(event => event instanceof NavigationEnd).subscribe(event => {\n        this.countState = 0;\n        this.navlinks.forEach(link => {\n          if (link.group) {\n            const routeUrl = this.getUrl();\n            const currentUrl = routeUrl.split('/');\n            if (currentUrl.indexOf(link.group) > 0) {\n              link.open = true;\n              this.closeOtherLinks(link);\n            }\n          }\n        });\n      });\n    }\n    constructor(router) {\n      this.router = router;\n      this.navlinks = [];\n      this.countState = 1;\n    }\n  }\n  AccordionDirective.ɵfac = function AccordionDirective_Factory(t) {\n    return new (t || AccordionDirective)(i0.ɵɵdirectiveInject(i1.Router));\n  };\n  AccordionDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: AccordionDirective,\n    selectors: [[\"\", \"appAccordion\", \"\"]]\n  });\n  return AccordionDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}